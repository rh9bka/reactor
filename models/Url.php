<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "urls".
 *
 * @property int $id
 * @property int|null $created_at
 * @property int|null $expired_at
 * @property int|null $userID
 * @property int|null $cntGo
 * @property int|null $cntErr
 * @property string|null $minUrl
 * @property string|null $fullUrl
 *
 * @property Stat[] $stats
 */
class Url extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'urls';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['created_at', 'expired_at', 'userID'], 'integer'],
            [['minUrl'], 'string', 'max' => 50],
            [['fullUrl'], 'string', 'max' => 500],
        ];
    }

    public function beforeSave($insert)
    {
        $url = Url::findOne(['minUrl'=>$this->minUrl]);
        if(!empty($url)){
            $this->minUrl = self::getHash($this->fullUrl.rand(0,100));
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'created_at' => Yii::t('app', 'Created At'),
            'expired_at' => Yii::t('app', 'Expired At'),
            'userID' => Yii::t('app', 'User ID'),
            'minUrl' => Yii::t('app', 'Min Url'),
            'fullUrl' => Yii::t('app', 'Full Url'),
        ];
    }

    /**
     * Gets query for [[Stats]].
     *
     * @return \yii\db\ActiveQuery|StatQuery
     */
    public function getStats()
    {
        return $this->hasMany(Stat::className(), ['urlID' => 'id']);
    }

    /**
     * @return bool
     */
    public function isExpired(){
        return $this->expired_at < time();
    }

    /**
     * @return bool
     */
    public function plusGo(){
        $this->cntGo++;
        return $this->save();
    }

    /**
     * @return bool
     */
    public function plusErr(){
        $this->cntErr++;
        return $this->save();
    }

    /**
     * {@inheritdoc}
     * @return UrlQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new UrlQuery(get_called_class());
    }

    /**
     * Возвращает минифицированную ссылку на этот сайт
     * @return string
     */
    public function getLink(){
        return Yii::$app->urlManager->createAbsoluteUrl(['url/index','hash'=>$this->minUrl]);
    }

    /**
     * Возвращает последние N записей
     * @param $cnt
     * @return Url[]|array
     */
    public static function getLast($cnt){
        return self::find()->orderBy('id DESC')->limit($cnt)->all();
    }

    public static function getHash($url){
        return hash('crc32',$url.uniqid());
    }
}
